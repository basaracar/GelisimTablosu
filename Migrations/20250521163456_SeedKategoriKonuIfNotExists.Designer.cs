// <auto-generated />
using GelisimTablosu.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GelisimTablosu.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250521163456_SeedKategoriKonuIfNotExists")]
    partial class SeedKategoriKonuIfNotExists
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("GelisimTablosu.Models.Kategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Kategoriler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ad = "Python Projeleri"
                        });
                });

            modelBuilder.Entity("GelisimTablosu.Models.Konu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("KategoriId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zorluk")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("KategoriId");

                    b.ToTable("Konular");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aciklama = "Toplama, çıkarma, çarpma, bölme işlemleri yapan basit bir hesap makinesi.",
                            Baslik = "Hesap Makinesi Uygulaması",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 2,
                            Aciklama = "Girilen ders notlarına göre ortalama hesaplayıp geçip kalma durumu gösteren uygulama.",
                            Baslik = "Not Ortalaması Hesaplayıcı",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 3,
                            Aciklama = "Para çekme, para yatırma, bakiye görüntüleme işlemleri yapılabilir.",
                            Baslik = "ATM Simülasyonu",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 4,
                            Aciklama = "Bilgisayarın rastgele tuttuğu sayıyı tahmin etmeye çalışılan oyun.",
                            Baslik = "Sayı Tahmin Oyunu",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 5,
                            Aciklama = "Girilen şifrenin uzunluğu ve karakter çeşitliliğine göre zorluk derecesini hesaplar.",
                            Baslik = "Şifre Güçlülüğü Kontrolü",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 6,
                            Aciklama = "Boy ve kilo bilgisine göre VKİ değeri ve yorumunu verir.",
                            Baslik = "Vücut Kitle İndeksi (VKİ) Hesaplayıcı",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 7,
                            Aciklama = "Kişi ekleme, silme, arama işlemleri yapılabilen telefon rehberi.",
                            Baslik = "Basit Rehber Uygulaması",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 8,
                            Aciklama = "İngilizce kelimenin Türkçesini gösteren mini sözlük (hazır bir dictionary yapısı ile).",
                            Baslik = "Sözlük Uygulaması",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 9,
                            Aciklama = "5-10 soruluk bir bilgi yarışması. Kullanıcıdan cevap alıp puan hesaplar.",
                            Baslik = "Yarışma (Quiz) Uygulaması",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 10,
                            Aciklama = "Kayıtlı kişilerin doğum günlerini saklar ve sorgulama yapılabilir.",
                            Baslik = "Doğum Günü Hatırlatıcı",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 11,
                            Aciklama = "1 ile 6 arasında rastgele zar atan uygulama. İstenirse çift zarla yapılabilir.",
                            Baslik = "Zar Atma Simülatörü",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 12,
                            Aciklama = "Kullanıcının girdiği sayıya kadar çarpım tablosu oluşturan program.",
                            Baslik = "Çarpım Tablosu Yazdırıcı",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 13,
                            Aciklama = "Girilen metni belirli bir kaydırmayla şifreleyen ve çözebilen uygulama.",
                            Baslik = "Metin Şifreleme (Caesar Cipher)",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 14,
                            Aciklama = "Kullanıcının girdiği metindeki kelime ve harf sayısını bulur.",
                            Baslik = "Kelime Sayacı",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 15,
                            Aciklama = "Kullanıcı bilgilerini .txt dosyasına kaydeder ve okur.",
                            Baslik = "Dosya Kayıt ve Okuma Uygulaması",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 16,
                            Aciklama = "Anlık olarak saat/dakika/saniye gösteren mini saat simülasyonu. (Zaman modülü kullanılarak)",
                            Baslik = "Dijital Saat Gösterimi (Saniyelik)",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 17,
                            Aciklama = "Ay ve yıl girildiğinde o ayın takvimini gösterir (calendar modülü ile).",
                            Baslik = "Basit Takvim Görüntüleyici",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 18,
                            Aciklama = "Girilen aralıkta asal sayıları listeler.",
                            Baslik = "Asal Sayı Bulucu",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 19,
                            Aciklama = "Kullanıcının girdiği sayının faktöriyelini hesaplar.",
                            Baslik = "Faktöriyel Hesaplayıcı",
                            KategoriId = 1,
                            Zorluk = 0
                        },
                        new
                        {
                            Id = 20,
                            Aciklama = "Kullanıcı ürün ekler, siler ve toplam fiyatı gösteren basit bir uygulama.",
                            Baslik = "Mini Alışveriş Sepeti",
                            KategoriId = 1,
                            Zorluk = 0
                        });
                });

            modelBuilder.Entity("GelisimTablosu.Models.Konu", b =>
                {
                    b.HasOne("GelisimTablosu.Models.Kategori", "Kategori")
                        .WithMany()
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");
                });
#pragma warning restore 612, 618
        }
    }
}
